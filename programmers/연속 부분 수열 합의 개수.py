# 문제 설명
# 철호는 수열을 가지고 놀기 좋아합니다. 어느 날 철호는 어떤 자연수로 이루어진 원형 수열의 연속하는 부분 수열의 합으로 만들 수 있는 수가 모두 몇 가지인지 알아보고 싶어졌습니다.
# 원형 수열이란 일반적인 수열에서 처음과 끝이 연결된 형태의 수열을 말합니다. 예를 들어 수열 [7, 9, 1, 1, 4] 로 원형 수열을 만들면 다음과 같습니다.
# 원형 수열은 처음과 끝이 연결되어 끊기는 부분이 없기 때문에 연속하는 부분 수열도 일반적인 수열보다 많아집니다.
# 원형 수열의 모든 원소 elements가 순서대로 주어질 때, 원형 수열의 연속 부분 수열 합으로 만들 수 있는 수의 개수를 return 하도록 solution 함수를 완성해주세요.
# elements	result
# [7,9,1,1,4]	18
# 길이가 1인 연속 부분 수열로부터 [1, 4, 7, 9] 네 가지의 합이 나올 수 있습니다.
# 길이가 2인 연속 부분 수열로부터 [2, 5, 10, 11, 16] 다섯 가지의 합이 나올 수 있습니다.
# 길이가 3인 연속 부분 수열로부터 [6, 11, 12, 17, 20] 다섯 가지의 합이 나올 수 있습니다.
# 길이가 4인 연속 부분 수열로부터 [13, 15, 18, 21] 네 가지의 합이 나올 수 있습니다.
# 길이가 5인 연속 부분 수열로부터 [22] 한 가지의 합이 나올 수 있습니다.
# 이들 중 중복되는 값을 제외하면 다음과 같은 18가지의 수들을 얻습니다.
# [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22]


def solution(elements) :
    #엘레멘트 맥스 숫자 조회
    maxNum = len(elements)

    resultSet = set()
    #시작 원소부터 끝원소까지 순회
    for i in range(len(elements)) :
        #리스트 길이만큼의 연속수합을 생성 가능하다.
        for j in range(1, maxNum) :
            # i + j 가 maxNum보다 크다면, 2번으로 나누어 더해야 한다.
            # 1. list[:크기를 초과하는 부분만큼. 리스트 길이가 5(maxNum), 현위치 3(i), 더해야 하는 숫자 4(j)개라면? [3,4] + [0,1]
            # 2. list[i:]([3,4] + [:i+j-maxNum]
            el = 0
            print(i,j)
            if (j + i) > maxNum :
                el = sum(elements[i:]) + sum(elements[:i+j-maxNum])
            else :
                if(i == j) : el = elements[i]
                else : el = sum(elements[i:j])
            print(el)
            resultSet.add(el)
    print((resultSet))
    print(len(resultSet))


ele = [7,9,1,1,4]
solution(ele)